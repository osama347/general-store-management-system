-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.attributes (
  attribute_id integer NOT NULL DEFAULT nextval('attributes_attribute_id_seq'::regclass),
  category_id integer NOT NULL,
  attribute_name character varying NOT NULL,
  data_type character varying NOT NULL CHECK (data_type::text = ANY (ARRAY['text'::character varying, 'number'::character varying, 'decimal'::character varying, 'date'::character varying]::text[])),
  CONSTRAINT attributes_pkey PRIMARY KEY (attribute_id),
  CONSTRAINT attributes_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.categories(category_id)
);
CREATE TABLE public.categories (
  category_id integer NOT NULL DEFAULT nextval('categories_category_id_seq'::regclass),
  name character varying NOT NULL UNIQUE,
  description text,
  CONSTRAINT categories_pkey PRIMARY KEY (category_id)
);
CREATE TABLE public.customers (
  customer_id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  first_name text NOT NULL,
  last_name text NOT NULL,
  email text UNIQUE,
  phone text,
  address text,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  location_id bigint,
  CONSTRAINT customers_pkey PRIMARY KEY (customer_id),
  CONSTRAINT customers_location_id_fkey FOREIGN KEY (location_id) REFERENCES public.locations(location_id)
);
CREATE TABLE public.expense_categories (
  category_id integer GENERATED ALWAYS AS IDENTITY NOT NULL,
  name text NOT NULL UNIQUE,
  description text,
  is_active boolean DEFAULT true,
  CONSTRAINT expense_categories_pkey PRIMARY KEY (category_id)
);
CREATE TABLE public.expenses (
  expense_id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  location_id bigint,
  category_id integer,
  amount numeric NOT NULL CHECK (amount > 0::numeric),
  expense_date timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
  description text,
  status text NOT NULL DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'approved'::text, 'rejected'::text])),
  receipt_number text,
  vendor_name text,
  notes text,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  profile_id uuid,
  created_by uuid,
  updated_by uuid,
  CONSTRAINT expenses_pkey PRIMARY KEY (expense_id),
  CONSTRAINT expenses_profile_id_fkey FOREIGN KEY (profile_id) REFERENCES public.profiles(id),
  CONSTRAINT expenses_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.profiles(id),
  CONSTRAINT expenses_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES public.profiles(id),
  CONSTRAINT expenses_location_id_fkey FOREIGN KEY (location_id) REFERENCES public.locations(location_id),
  CONSTRAINT expenses_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.expense_categories(category_id)
);
CREATE TABLE public.inventory (
  product_id integer NOT NULL,
  location_id bigint NOT NULL,
  quantity integer NOT NULL DEFAULT 0 CHECK (quantity >= 0),
  reserved_quantity integer NOT NULL DEFAULT 0 CHECK (reserved_quantity >= 0),
  updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT inventory_pkey PRIMARY KEY (location_id, product_id),
  CONSTRAINT inventory_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(product_id),
  CONSTRAINT inventory_location_id_fkey FOREIGN KEY (location_id) REFERENCES public.locations(location_id)
);
CREATE TABLE public.inventory_transfers (
  transfer_id bigint NOT NULL DEFAULT nextval('inventory_transfers_transfer_id_seq'::regclass),
  product_id integer NOT NULL,
  from_location_id bigint NOT NULL,
  to_location_id bigint NOT NULL,
  quantity integer NOT NULL CHECK (quantity > 0),
  created_at timestamp with time zone DEFAULT now(),
  created_by_profile_id uuid,
  CONSTRAINT inventory_transfers_pkey PRIMARY KEY (transfer_id),
  CONSTRAINT inventory_transfers_created_by_fkey FOREIGN KEY (created_by_profile_id) REFERENCES public.profiles(id),
  CONSTRAINT inventory_transfers_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(product_id),
  CONSTRAINT inventory_transfers_from_location_id_fkey FOREIGN KEY (from_location_id) REFERENCES public.locations(location_id),
  CONSTRAINT inventory_transfers_to_location_id_fkey FOREIGN KEY (to_location_id) REFERENCES public.locations(location_id)
);
CREATE TABLE public.loans (
  loan_id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  loan_amount numeric NOT NULL,
  loan_date timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  due_date date,
  status text CHECK (status = ANY (ARRAY['pending'::text, 'paid'::text])),
  customer_id bigint,
  location_id bigint,
  CONSTRAINT loans_pkey PRIMARY KEY (loan_id),
  CONSTRAINT loans_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES public.customers(customer_id),
  CONSTRAINT loans_location_id_fkey FOREIGN KEY (location_id) REFERENCES public.locations(location_id)
);
CREATE TABLE public.locations (
  location_id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  name text NOT NULL,
  address text,
  location_type text NOT NULL CHECK (location_type = ANY (ARRAY['warehouse'::text, 'store'::text])),
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  original_id text,
  CONSTRAINT locations_pkey PRIMARY KEY (location_id)
);
CREATE TABLE public.product_attributes (
  product_id integer NOT NULL,
  attribute_id integer NOT NULL,
  value_text text,
  value_number integer,
  value_decimal numeric,
  value_date date,
  CONSTRAINT product_attributes_pkey PRIMARY KEY (attribute_id, product_id),
  CONSTRAINT product_attributes_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(product_id),
  CONSTRAINT product_attributes_attribute_id_fkey FOREIGN KEY (attribute_id) REFERENCES public.attributes(attribute_id)
);
CREATE TABLE public.products (
  product_id integer NOT NULL DEFAULT nextval('products_product_id_seq'::regclass),
  category_id integer NOT NULL,
  name character varying NOT NULL,
  description text,
  sku character varying UNIQUE,
  base_price numeric NOT NULL,
  CONSTRAINT products_pkey PRIMARY KEY (product_id),
  CONSTRAINT products_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.categories(category_id)
);
CREATE TABLE public.profiles (
  id uuid NOT NULL,
  email text,
  full_name text,
  avatar_url text,
  created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  location_id bigint,
  phone text,
  hire_date date,
  is_active boolean DEFAULT true,
  role text DEFAULT 'store_manager'::text,
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_location_id_fkey FOREIGN KEY (location_id) REFERENCES public.locations(location_id),
  CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id)
);
CREATE TABLE public.reports (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  report_type text NOT NULL,
  filters jsonb,
  status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'processing'::text, 'ready'::text, 'failed'::text])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  completed_at timestamp with time zone,
  file_url text,
  error_message text,
  CONSTRAINT reports_pkey PRIMARY KEY (id),
  CONSTRAINT reports_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.sale_items (
  sale_item_id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  sale_id bigint NOT NULL,
  product_id integer NOT NULL,
  quantity integer NOT NULL CHECK (quantity > 0),
  unit_price numeric NOT NULL,
  total_price numeric NOT NULL,
  CONSTRAINT sale_items_pkey PRIMARY KEY (sale_item_id),
  CONSTRAINT sale_items_sale_id_fkey FOREIGN KEY (sale_id) REFERENCES public.sales(sale_id),
  CONSTRAINT sale_items_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(product_id)
);
CREATE TABLE public.sales (
  sale_id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  customer_id bigint NOT NULL,
  sale_date timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  total_amount numeric NOT NULL,
  status text DEFAULT 'Completed'::text CHECK (status = ANY (ARRAY['Pending'::text, 'Completed'::text, 'Cancelled'::text])),
  profile_id uuid,
  location_id bigint,
  CONSTRAINT sales_pkey PRIMARY KEY (sale_id),
  CONSTRAINT sales_profile_id_fkey FOREIGN KEY (profile_id) REFERENCES public.profiles(id),
  CONSTRAINT sales_location_id_fkey FOREIGN KEY (location_id) REFERENCES public.locations(location_id),
  CONSTRAINT sales_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES public.customers(customer_id)
);


