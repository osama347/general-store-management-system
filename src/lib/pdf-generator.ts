import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';

type ReportData = any;
type ReportFilters = {
  reportType: string;
  startDate: string;
  endDate: string;
  location: string;
  category: string;
  expenseCategory: string;
  staff: string;
  status: string;
  generatedBy: string;
  generatedAt: string;
};

export class PDFGenerator {
  private doc: jsPDF;
  private pageWidth: number;
  private pageHeight: number;
  private margin: number;
  private currentY: number;

  constructor() {
    this.doc = new jsPDF('p', 'mm', 'a4');
    this.pageWidth = this.doc.internal.pageSize.getWidth();
    this.pageHeight = this.doc.internal.pageSize.getHeight();
    this.margin = 15;
    this.currentY = this.margin;
  }

  private reset() {
    // Reset the document and all state for a fresh start
    this.doc = new jsPDF('p', 'mm', 'a4');
    this.pageWidth = this.doc.internal.pageSize.getWidth();
    this.pageHeight = this.doc.internal.pageSize.getHeight();
    this.margin = 15;
    this.currentY = this.margin;
    this.generatedBy = '';
    this.generatedAt = '';
  }

  private addHeader(title: string, filters: ReportFilters) {
    // Company/System name
    this.doc.setFontSize(20);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('General Store Management System', this.pageWidth / 2, this.currentY, { align: 'center' });
    this.currentY += 10;

    // Report title
    this.doc.setFontSize(16);
    this.doc.text(title, this.pageWidth / 2, this.currentY, { align: 'center' });
    this.currentY += 10;

    // Report details
    this.doc.setFontSize(10);
    this.doc.setFont('helvetica', 'normal');
    this.doc.text(`Date Range: ${filters.startDate} to ${filters.endDate}`, this.margin, this.currentY);
    this.currentY += 5;

    if (filters.location !== 'All Locations') {
      this.doc.text(`Location: ${filters.location}`, this.margin, this.currentY);
      this.currentY += 5;
    }

    if (filters.category !== 'All Categories') {
      this.doc.text(`Category: ${filters.category}`, this.margin, this.currentY);
      this.currentY += 5;
    }

    if (filters.staff !== 'All Staff') {
      this.doc.text(`Staff: ${filters.staff}`, this.margin, this.currentY);
      this.currentY += 5;
    }

    if (filters.status !== 'All Statuses') {
      this.doc.text(`Status: ${filters.status}`, this.margin, this.currentY);
      this.currentY += 5;
    }

    this.currentY += 3;
    this.doc.setDrawColor(200, 200, 200);
    this.doc.line(this.margin, this.currentY, this.pageWidth - this.margin, this.currentY);
    this.currentY += 8;
  }

  private generatedBy: string = '';
  private generatedAt: string = '';

  private addFooter() {
    const footerY = this.pageHeight - 10;
    this.doc.setFontSize(8);
    this.doc.setFont('helvetica', 'italic');
    this.doc.setTextColor(128, 128, 128);
    this.doc.text(`Generated by: ${this.generatedBy} on ${this.generatedAt}`, this.margin, footerY);
    this.doc.text(`Page ${this.doc.getCurrentPageInfo().pageNumber}`, this.pageWidth - this.margin, footerY, { align: 'right' });
    this.doc.setTextColor(0, 0, 0);
  }

  private generateSalesReport(data: any[]) {
    const tableData = data.map((sale) => [
      new Date(sale.sale_date).toLocaleDateString(),
      `${sale.customers?.first_name || ''} ${sale.customers?.last_name || ''}`.trim() || 'N/A',
      sale.locations?.name || 'N/A',
      sale.profiles?.full_name || sale.profiles?.email || 'N/A',
      `$${Number(sale.total_amount || 0).toFixed(2)}`,
      sale.status || 'N/A',
    ]);

    // Add summary
    const totalAmount = data.reduce((sum, sale) => sum + Number(sale.total_amount || 0), 0);
    const completedSales = data.filter(s => s.status === 'Completed').length;

    this.doc.setFontSize(11);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('Summary:', this.margin, this.currentY);
    this.currentY += 6;
    
    this.doc.setFontSize(10);
    this.doc.setFont('helvetica', 'normal');
    this.doc.text(`Total Sales: ${data.length}`, this.margin + 5, this.currentY);
    this.currentY += 5;
    this.doc.text(`Completed Sales: ${completedSales}`, this.margin + 5, this.currentY);
    this.currentY += 5;
    this.doc.text(`Total Revenue: $${totalAmount.toFixed(2)}`, this.margin + 5, this.currentY);
    this.currentY += 10;

    autoTable(this.doc, {
      startY: this.currentY,
      head: [['Date', 'Customer', 'Location', 'Staff', 'Amount', 'Status']],
      body: tableData,
      margin: { left: this.margin, right: this.margin },
      styles: { fontSize: 9 },
      headStyles: { fillColor: [41, 128, 185], textColor: 255 },
      alternateRowStyles: { fillColor: [245, 245, 245] },
    });
  }

  private generateInventoryReport(data: any[]) {
    const tableData = data.map((item) => [
      item.products?.name || 'N/A',
      item.products?.sku || 'N/A',
      item.products?.categories?.name || 'N/A',
      item.locations?.name || 'N/A',
      item.quantity?.toString() || '0',
      item.reserved_quantity?.toString() || '0',
      (item.quantity - item.reserved_quantity)?.toString() || '0',
    ]);

    // Add summary
    const totalQuantity = data.reduce((sum, item) => sum + Number(item.quantity || 0), 0);
    const totalReserved = data.reduce((sum, item) => sum + Number(item.reserved_quantity || 0), 0);
    const lowStock = data.filter(item => (item.quantity - item.reserved_quantity) < 10).length;

    this.doc.setFontSize(11);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('Summary:', this.margin, this.currentY);
    this.currentY += 6;
    
    this.doc.setFontSize(10);
    this.doc.setFont('helvetica', 'normal');
    this.doc.text(`Total Items: ${data.length}`, this.margin + 5, this.currentY);
    this.currentY += 5;
    this.doc.text(`Total Quantity: ${totalQuantity}`, this.margin + 5, this.currentY);
    this.currentY += 5;
    this.doc.text(`Reserved Quantity: ${totalReserved}`, this.margin + 5, this.currentY);
    this.currentY += 5;
    this.doc.text(`Low Stock Items (< 10): ${lowStock}`, this.margin + 5, this.currentY);
    this.currentY += 10;

    autoTable(this.doc, {
      startY: this.currentY,
      head: [['Product', 'SKU', 'Category', 'Location', 'Quantity', 'Reserved', 'Available']],
      body: tableData,
      margin: { left: this.margin, right: this.margin },
      styles: { fontSize: 9 },
      headStyles: { fillColor: [41, 128, 185], textColor: 255 },
      alternateRowStyles: { fillColor: [245, 245, 245] },
    });
  }

  private generateExpensesReport(data: any[]) {
    const tableData = data.map((expense) => [
      new Date(expense.expense_date).toLocaleDateString(),
      expense.expense_categories?.name || 'N/A',
      expense.locations?.name || 'N/A',
      `$${Number(expense.amount || 0).toFixed(2)}`,
      expense.status || 'N/A',
      expense.profiles?.full_name || expense.profiles?.email || 'N/A',
      expense.vendor_name || 'N/A',
    ]);

    // Add summary
    const totalExpenses = data.reduce((sum, expense) => sum + Number(expense.amount || 0), 0);
    const approvedExpenses = data.filter(e => e.status === 'approved');
    const totalApproved = approvedExpenses.reduce((sum, expense) => sum + Number(expense.amount || 0), 0);

    this.doc.setFontSize(11);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('Summary:', this.margin, this.currentY);
    this.currentY += 6;
    
    this.doc.setFontSize(10);
    this.doc.setFont('helvetica', 'normal');
    this.doc.text(`Total Expenses: ${data.length}`, this.margin + 5, this.currentY);
    this.currentY += 5;
    this.doc.text(`Approved: ${approvedExpenses.length}`, this.margin + 5, this.currentY);
    this.currentY += 5;
    this.doc.text(`Total Amount: $${totalExpenses.toFixed(2)}`, this.margin + 5, this.currentY);
    this.currentY += 5;
    this.doc.text(`Approved Amount: $${totalApproved.toFixed(2)}`, this.margin + 5, this.currentY);
    this.currentY += 10;

    autoTable(this.doc, {
      startY: this.currentY,
      head: [['Date', 'Category', 'Location', 'Amount', 'Status', 'Staff', 'Vendor']],
      body: tableData,
      margin: { left: this.margin, right: this.margin },
      styles: { fontSize: 9 },
      headStyles: { fillColor: [41, 128, 185], textColor: 255 },
      alternateRowStyles: { fillColor: [245, 245, 245] },
    });
  }

  private generateLoansReport(data: any[]) {
    const tableData = data.map((loan) => [
      new Date(loan.loan_date).toLocaleDateString(),
      `${loan.customers?.first_name || ''} ${loan.customers?.last_name || ''}`.trim() || 'N/A',
      loan.customers?.phone || 'N/A',
      loan.locations?.name || 'N/A',
      `$${Number(loan.loan_amount || 0).toFixed(2)}`,
      loan.due_date ? new Date(loan.due_date).toLocaleDateString() : 'N/A',
      loan.status || 'N/A',
    ]);

    // Add summary
    const totalLoans = data.reduce((sum, loan) => sum + Number(loan.loan_amount || 0), 0);
    const paidLoans = data.filter(l => l.status === 'paid');
    const pendingLoans = data.filter(l => l.status === 'pending');
    const totalPaid = paidLoans.reduce((sum, loan) => sum + Number(loan.loan_amount || 0), 0);
    const totalPending = pendingLoans.reduce((sum, loan) => sum + Number(loan.loan_amount || 0), 0);

    this.doc.setFontSize(11);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('Summary:', this.margin, this.currentY);
    this.currentY += 6;
    
    this.doc.setFontSize(10);
    this.doc.setFont('helvetica', 'normal');
    this.doc.text(`Total Loans: ${data.length}`, this.margin + 5, this.currentY);
    this.currentY += 5;
    this.doc.text(`Paid: ${paidLoans.length} ($${totalPaid.toFixed(2)})`, this.margin + 5, this.currentY);
    this.currentY += 5;
    this.doc.text(`Pending: ${pendingLoans.length} ($${totalPending.toFixed(2)})`, this.margin + 5, this.currentY);
    this.currentY += 5;
    this.doc.text(`Total Amount: $${totalLoans.toFixed(2)}`, this.margin + 5, this.currentY);
    this.currentY += 10;

    autoTable(this.doc, {
      startY: this.currentY,
      head: [['Date', 'Customer', 'Phone', 'Location', 'Amount', 'Due Date', 'Status']],
      body: tableData,
      margin: { left: this.margin, right: this.margin },
      styles: { fontSize: 9 },
      headStyles: { fillColor: [41, 128, 185], textColor: 255 },
      alternateRowStyles: { fillColor: [245, 245, 245] },
    });
  }

  private generateTransfersReport(data: any[]) {
    const tableData = data.map((transfer) => [
      new Date(transfer.created_at).toLocaleDateString(),
      transfer.products?.name || 'N/A',
      transfer.from_location?.name || 'N/A',
      transfer.to_location?.name || 'N/A',
      transfer.quantity?.toString() || '0',
      transfer.profiles?.full_name || transfer.profiles?.email || 'N/A',
    ]);

    // Add summary
    const totalQuantity = data.reduce((sum, transfer) => sum + Number(transfer.quantity || 0), 0);

    this.doc.setFontSize(11);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('Summary:', this.margin, this.currentY);
    this.currentY += 6;
    
    this.doc.setFontSize(10);
    this.doc.setFont('helvetica', 'normal');
    this.doc.text(`Total Transfers: ${data.length}`, this.margin + 5, this.currentY);
    this.currentY += 5;
    this.doc.text(`Total Quantity Transferred: ${totalQuantity}`, this.margin + 5, this.currentY);
    this.currentY += 10;

    autoTable(this.doc, {
      startY: this.currentY,
      head: [['Date', 'Product', 'From Location', 'To Location', 'Quantity', 'Staff']],
      body: tableData,
      margin: { left: this.margin, right: this.margin },
      styles: { fontSize: 9 },
      headStyles: { fillColor: [41, 128, 185], textColor: 255 },
      alternateRowStyles: { fillColor: [245, 245, 245] },
    });
  }

  private generateCustomersReport(data: any[]) {
    const tableData = data.map((customer) => [
      `${customer.first_name || ''} ${customer.last_name || ''}`.trim() || 'N/A',
      customer.email || 'N/A',
      customer.phone || 'N/A',
      customer.locations?.name || 'N/A',
      customer.sales?.length?.toString() || '0',
      customer.loans?.length?.toString() || '0',
      new Date(customer.created_at).toLocaleDateString(),
    ]);

    // Add summary
    const totalSales = data.reduce((sum, customer) => sum + (customer.sales?.length || 0), 0);
    const totalLoans = data.reduce((sum, customer) => sum + (customer.loans?.length || 0), 0);

    this.doc.setFontSize(11);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('Summary:', this.margin, this.currentY);
    this.currentY += 6;
    
    this.doc.setFontSize(10);
    this.doc.setFont('helvetica', 'normal');
    this.doc.text(`Total Customers: ${data.length}`, this.margin + 5, this.currentY);
    this.currentY += 5;
    this.doc.text(`Total Sales: ${totalSales}`, this.margin + 5, this.currentY);
    this.currentY += 5;
    this.doc.text(`Total Loans: ${totalLoans}`, this.margin + 5, this.currentY);
    this.currentY += 10;

    autoTable(this.doc, {
      startY: this.currentY,
      head: [['Name', 'Email', 'Phone', 'Location', 'Sales Count', 'Loans Count', 'Joined']],
      body: tableData,
      margin: { left: this.margin, right: this.margin },
      styles: { fontSize: 9 },
      headStyles: { fillColor: [41, 128, 185], textColor: 255 },
      alternateRowStyles: { fillColor: [245, 245, 245] },
    });
  }

  private generateFinancialReport(data: any) {
    const { sales = [], expenses = [], loans = [] } = data;

    // Calculate totals
    const totalRevenue = sales.reduce((sum: number, sale: any) => sum + Number(sale.total_amount || 0), 0);
    const totalExpenses = expenses.reduce((sum: number, expense: any) => sum + Number(expense.amount || 0), 0);
    const totalLoans = loans.reduce((sum: number, loan: any) => sum + Number(loan.loan_amount || 0), 0);
    const paidLoans = loans.filter((l: any) => l.status === 'paid');
    const totalPaidLoans = paidLoans.reduce((sum: number, loan: any) => sum + Number(loan.loan_amount || 0), 0);
    const netProfit = totalRevenue - totalExpenses;

    this.doc.setFontSize(12);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('Financial Summary', this.margin, this.currentY);
    this.currentY += 8;

    // Summary box
    this.doc.setFillColor(240, 248, 255);
    this.doc.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, 50, 'F');
    
    this.doc.setFontSize(10);
    this.doc.setFont('helvetica', 'bold');
    this.currentY += 7;
    this.doc.text(`Total Revenue:`, this.margin + 5, this.currentY);
    this.doc.setFont('helvetica', 'normal');
    this.doc.text(`$${totalRevenue.toFixed(2)}`, this.margin + 60, this.currentY);
    
    this.currentY += 7;
    this.doc.setFont('helvetica', 'bold');
    this.doc.text(`Total Expenses:`, this.margin + 5, this.currentY);
    this.doc.setFont('helvetica', 'normal');
    this.doc.text(`$${totalExpenses.toFixed(2)}`, this.margin + 60, this.currentY);
    
    this.currentY += 7;
    this.doc.setFont('helvetica', 'bold');
    this.doc.text(`Net Profit:`, this.margin + 5, this.currentY);
    this.doc.setFont('helvetica', 'normal');
    this.doc.setTextColor(netProfit >= 0 ? 0 : 255, netProfit >= 0 ? 128 : 0, 0);
    this.doc.text(`$${netProfit.toFixed(2)}`, this.margin + 60, this.currentY);
    this.doc.setTextColor(0, 0, 0);
    
    this.currentY += 7;
    this.doc.setFont('helvetica', 'bold');
    this.doc.text(`Total Loans Issued:`, this.margin + 5, this.currentY);
    this.doc.setFont('helvetica', 'normal');
    this.doc.text(`$${totalLoans.toFixed(2)}`, this.margin + 60, this.currentY);
    
    this.currentY += 7;
    this.doc.setFont('helvetica', 'bold');
    this.doc.text(`Loans Recovered:`, this.margin + 5, this.currentY);
    this.doc.setFont('helvetica', 'normal');
    this.doc.text(`$${totalPaidLoans.toFixed(2)}`, this.margin + 60, this.currentY);
    
    this.currentY += 15;

    // Breakdown tables
    if (sales.length > 0) {
      this.doc.setFontSize(11);
      this.doc.setFont('helvetica', 'bold');
      this.doc.text('Sales Breakdown', this.margin, this.currentY);
      this.currentY += 5;

      const salesData = sales.map((sale: any) => [
        new Date(sale.sale_date).toLocaleDateString(),
        `$${Number(sale.total_amount || 0).toFixed(2)}`,
        sale.status || 'N/A',
      ]);

      autoTable(this.doc, {
        startY: this.currentY,
        head: [['Date', 'Amount', 'Status']],
        body: salesData,
        margin: { left: this.margin, right: this.margin },
        styles: { fontSize: 9 },
        headStyles: { fillColor: [46, 204, 113], textColor: 255 },
      });

      this.currentY = (this.doc as any).lastAutoTable.finalY + 10;
    }

    if (expenses.length > 0) {
      this.doc.setFontSize(11);
      this.doc.setFont('helvetica', 'bold');
      this.doc.text('Expenses Breakdown', this.margin, this.currentY);
      this.currentY += 5;

      const expensesData = expenses.map((expense: any) => [
        new Date(expense.expense_date).toLocaleDateString(),
        expense.expense_categories?.name || 'N/A',
        `$${Number(expense.amount || 0).toFixed(2)}`,
        expense.status || 'N/A',
      ]);

      autoTable(this.doc, {
        startY: this.currentY,
        head: [['Date', 'Category', 'Amount', 'Status']],
        body: expensesData,
        margin: { left: this.margin, right: this.margin },
        styles: { fontSize: 9 },
        headStyles: { fillColor: [231, 76, 60], textColor: 255 },
      });
    }
  }

  private generateProductsReport(data: any[]) {
    const tableData = data.map((product) => {
      const totalSold = product.sale_items?.reduce((sum: number, item: any) => sum + Number(item.quantity || 0), 0) || 0;
      const totalRevenue = product.sale_items?.reduce((sum: number, item: any) => sum + Number(item.total_price || 0), 0) || 0;
      const totalStock = product.inventory?.reduce((sum: number, inv: any) => sum + Number(inv.quantity || 0), 0) || 0;

      return [
        product.name || 'N/A',
        product.sku || 'N/A',
        product.categories?.name || 'N/A',
        `$${Number(product.base_price || 0).toFixed(2)}`,
        totalSold.toString(),
        `$${totalRevenue.toFixed(2)}`,
        totalStock.toString(),
      ];
    });

    // Add summary
    const totalRevenue = data.reduce((sum, product) => {
      return sum + (product.sale_items?.reduce((s: number, item: any) => s + Number(item.total_price || 0), 0) || 0);
    }, 0);

    this.doc.setFontSize(11);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('Summary:', this.margin, this.currentY);
    this.currentY += 6;
    
    this.doc.setFontSize(10);
    this.doc.setFont('helvetica', 'normal');
    this.doc.text(`Total Products: ${data.length}`, this.margin + 5, this.currentY);
    this.currentY += 5;
    this.doc.text(`Total Revenue: $${totalRevenue.toFixed(2)}`, this.margin + 5, this.currentY);
    this.currentY += 10;

    autoTable(this.doc, {
      startY: this.currentY,
      head: [['Product', 'SKU', 'Category', 'Price', 'Units Sold', 'Revenue', 'Stock']],
      body: tableData,
      margin: { left: this.margin, right: this.margin },
      styles: { fontSize: 9 },
      headStyles: { fillColor: [41, 128, 185], textColor: 255 },
      alternateRowStyles: { fillColor: [245, 245, 245] },
    });
  }

  public generate(reportType: string, data: ReportData, filters: ReportFilters): Blob {
    // Reset everything for a fresh document
    this.reset();
    
    // Store metadata
    this.generatedBy = filters.generatedBy;
    this.generatedAt = filters.generatedAt;
    
    this.doc.setDocumentProperties({
      title: `${reportType} Report`,
      author: filters.generatedBy,
    });

    // Add header
    const reportTitles: { [key: string]: string } = {
      sales: 'Sales Report',
      inventory: 'Inventory Report',
      expenses: 'Expenses Report',
      loans: 'Loans Report',
      transfers: 'Inventory Transfers Report',
      customers: 'Customers Report',
      financial: 'Financial Summary Report',
      products: 'Product Performance Report',
    };

    this.addHeader(reportTitles[reportType] || 'Report', filters);

    // Generate report based on type
    switch (reportType) {
      case 'sales':
        this.generateSalesReport(data);
        break;
      case 'inventory':
        this.generateInventoryReport(data);
        break;
      case 'expenses':
        this.generateExpensesReport(data);
        break;
      case 'loans':
        this.generateLoansReport(data);
        break;
      case 'transfers':
        this.generateTransfersReport(data);
        break;
      case 'customers':
        this.generateCustomersReport(data);
        break;
      case 'financial':
        this.generateFinancialReport(data);
        break;
      case 'products':
        this.generateProductsReport(data);
        break;
    }

    // Add footer to all pages
    const pageCount = this.doc.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      this.doc.setPage(i);
      this.addFooter();
    }

    // Return blob
    return this.doc.output('blob');
  }

  public download(reportType: string, data: ReportData, filters: ReportFilters) {
    try {
      const blob = this.generate(reportType, data, filters);
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `${reportType}-report-${new Date().getTime()}.pdf`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      // Clean up the URL after a short delay to ensure download starts
      setTimeout(() => {
        window.URL.revokeObjectURL(url);
      }, 100);
    } catch (error) {
      console.error('Error in PDF download:', error);
      throw error;
    }
  }
}
